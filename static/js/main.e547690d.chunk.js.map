{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","text","para","type","componentDidMount","_this","getText","handleChange","e","setState","Object","defineProperty","target","id","value","handleSubmit","preventDefault","console","log","axios","get","concat","then","res","data","react_default","a","createElement","className","onSubmit","this","onChange","placeholder","style","textAlign","margin","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mSAuFeA,6MAnFbC,MAAQ,CACNC,KAAM,GACNC,KAAM,EACNC,KAAM,UAGRC,kBAAoB,WAClBC,EAAKC,aAGPC,aAAe,SAAAC,GACbH,EAAKI,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACGF,EAAEI,OAAOC,GAAKL,EAAEI,OAAOE,WAG5BC,aAAe,SAAAP,GACbA,EAAEQ,iBACFX,EAAKC,UACLW,QAAQC,IAAIb,EAAKL,MAAME,SAGzBI,QAAU,WACRa,IACGC,IADH,mDAAAC,OAGMhB,EAAKL,MAAME,KAHjB,+BAAAmB,OAIkChB,EAAKL,MAAMG,OAE1CmB,KAAK,SAAAC,GACJlB,EAAKI,SAAS,CACZR,KAAMsB,EAAIC,kFAMhB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,gDACAF,EAAAC,EAAAC,cAAA,QAAME,SAAUC,KAAKf,cACnBU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,UACEC,UAAU,eACVG,SAAUD,KAAKvB,aACfM,GAAG,QAEHY,EAAAC,EAAAC,cAAA,UAAQb,MAAM,QAAd,QACAW,EAAAC,EAAAC,cAAA,UAAQb,MAAM,QAAd,UAGJW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAf,SAEFH,EAAAC,EAAAC,cAAA,SACExB,KAAK,SACLyB,UAAU,eACVf,GAAG,OACHmB,YAAY,sBACZD,SAAUD,KAAKvB,iBAKrBkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,UAAQxB,KAAK,SAASyB,UAAU,wBAAhC,cAORH,EAAAC,EAAAC,cAAA,KAAGM,MAAO,CAAEC,UAAW,UAAWC,OAAQ,SACvCL,KAAK9B,MAAMC,cA7EJmC,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.e547690d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nclass App extends Component {\n  state = {\n    text: \"\",\n    para: 5,\n    type: \"text\"\n  };\n\n  componentDidMount = () => {\n    this.getText();\n  };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.id]: e.target.value\n    });\n  };\n  handleSubmit = e => {\n    e.preventDefault();\n    this.getText();\n    console.log(this.state.para);\n  };\n\n  getText = () => {\n    axios\n      .get(\n        `https://baconipsum.com/api/?type=all-meat&paras=${\n          this.state.para\n        }&start-with-lorem=1&format=${this.state.type}`\n      )\n      .then(res => {\n        this.setState({\n          text: res.data\n        });\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Non-veg Text Generator &#128540;</p>\n          <form onSubmit={this.handleSubmit}>\n            <div className=\"form-row \">\n              <div className=\"col-auto\">\n                <select\n                  className=\"form-control\"\n                  onChange={this.handleChange}\n                  id=\"type\"\n                >\n                  <option value=\"text\">TEXT</option>\n                  <option value=\"html\">HTML</option>\n                </select>\n              </div>\n              <div className=\"col-auto\">\n                <div className=\"input-group mb-2\">\n                  <div className=\"input-group-prepend\">\n                    <div className=\"input-group-text\">0-99</div>\n                  </div>\n                  <input\n                    type=\"number\"\n                    className=\"form-control\"\n                    id=\"para\"\n                    placeholder=\"How many paragraphs\"\n                    onChange={this.handleChange}\n                  />\n                </div>\n              </div>\n\n              <div className=\"col-auto\">\n                <button type=\"submit\" className=\"btn btn-primary mb-2\">\n                  Submit\n                </button>\n              </div>\n            </div>\n          </form>\n        </header>\n        <p style={{ textAlign: \"justify\", margin: \"30px\" }}>\n          {this.state.text}\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}